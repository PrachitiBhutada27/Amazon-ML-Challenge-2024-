{"metadata":{"kernelspec":{"display_name":"NLP","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.9"},"colab":{"provenance":[]},"kaggle":{"accelerator":"none","dataSources":[],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"In this hackathon, the goal is to create a machine learning model that extracts entity values from images. This capability is crucial in fields like healthcare, e-commerce, and content moderation, where precise product information is vital. As digital marketplaces expand, many products lack detailed textual descriptions, making it essential to obtain key details directly from images. These images provide important information such as weight, volume, voltage, wattage, dimensions, and many more, which are critical for digital stores.","metadata":{"_uuid":"a80a8c1b-d004-42c1-8d24-91514a218e83","_cell_guid":"2ec9de77-cca4-4ed3-af18-a7ae7ccba24e","id":"KlVZkpBTdvmL","trusted":true}},{"cell_type":"markdown","source":"### Basic library imports","metadata":{"_uuid":"77cd87c3-a9dd-406a-a8e8-1c8f6ca57c4b","_cell_guid":"91ec248c-6af6-4872-b5f7-8fee392fe32a","id":"1b70b34e","trusted":true}},{"cell_type":"code","source":"import re\nimport constants\nimport os\nimport requests\nimport pandas as pd\nimport multiprocessing\nimport time\nfrom time import time as timer\nfrom tqdm import tqdm\nimport numpy as np\nfrom pathlib import Path\nfrom functools import partial\nimport requests\nimport urllib\nfrom PIL import Image","metadata":{"_uuid":"8baefdbb-9b0f-431c-a115-a2e56d4e0de8","_cell_guid":"1c860b21-d331-48a1-9ded-d0a98f398430","collapsed":false,"id":"ipwvkZtUdVeL","jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Read Dataset","metadata":{"_uuid":"18b2db4e-cbba-4c81-8c3a-4494a1e7c867","_cell_guid":"91aa9e54-8acf-4e52-b3f1-cf969406afe8","id":"b8911e33","trusted":true}},{"cell_type":"code","source":"from google.colab import drive\ndrive.mount('/content/drive')","metadata":{"_uuid":"7027e9cb-9ee8-496f-bb11-21c396515c21","_cell_guid":"af42dd9e-04f4-4234-a8e2-21dc90fee7f2","collapsed":false,"id":"MVe6KMknSSkl","outputId":"0efb7c0e-5df1-453a-86f8-ef2abed30600","jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nimport requests\nimport concurrent.futures\nimport os\n\ndef download_image(image_url, save_path):\n    try:\n        response = requests.get(image_url, stream=True, timeout=10) # Stream for memory efficiency, timeout for robustness\n        response.raise_for_status()  # Check for HTTP errors\n\n        with open(save_path, 'wb') as f:\n            for chunk in response.iter_content(chunk_size=8192): # Chunked download for memory efficiency\n                f.write(chunk)\n\n        print(f\"Downloaded: {image_url}\")\n    except (requests.exceptions.RequestException, OSError) as e:\n        print(f\"Error downloading {image_url}: {e}\")\n\ndef download_images_from_csv(csv_file, image_column, save_directory):\n    if not os.path.exists(save_directory):\n        os.makedirs(save_directory)\n\n    df = pd.read_csv(csv_file)  # Read CSV lazily if possible, use 'chunksize' if needed for very large files\n\n    with concurrent.futures.ThreadPoolExecutor(max_workers=os.cpu_count()) as executor: # Utilize multiple cores for faster downloads\n        futures = []\n        for image_url in df[image_column]:\n            image_filename = image_url.split('/')[-1]  # Extract filename from URL\n            save_path = os.path.join(save_directory, image_filename)\n            futures.append(executor.submit(download_image, image_url, save_path))\n\n        concurrent.futures.wait(futures)  # Wait for all downloads to complete\n\n\ncsv_file = '/content/drive/MyDrive/amazon/test.csv'\nimage_column = 'image_link'  # Replace with the actual column name in your CSV\nsave_directory = '/content/drive/MyDrive/amazon/downloaded_images'\n\ndownload_images_from_csv(csv_file, image_column, save_directory)","metadata":{"_uuid":"72ccd629-b09b-4908-875e-28a4c17251e4","_cell_guid":"1106f8a0-e9bb-4427-bf4e-3e257d876582","collapsed":false,"id":"hucUTJJwQjF-","jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Sample PaddleOCR Result","metadata":{"_uuid":"b4d1aaad-e75a-45b0-80d4-e0c531cb3699","_cell_guid":"15c47cbe-97bc-4168-9b31-c8a97fa79199","id":"8ada48d2","trusted":true}},{"cell_type":"code","source":"!pip install paddleocr","metadata":{"_uuid":"728a608c-2708-4fad-a2db-0565ae6a6e5d","_cell_guid":"70cdcea4-3124-4652-b491-66b2a2c988e6","collapsed":false,"id":"inyQChBwS6kh","jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!pip install paddlepaddle","metadata":{"_uuid":"2f17a751-e174-433b-a1d0-329e441626da","_cell_guid":"1bebd1d9-9d96-4cd3-b666-a18d6d10e97d","collapsed":false,"id":"C-bp8Gl9S7rV","jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nfrom PIL import Image\n\nimg_path = '/content/drive/MyDrive/amazon/test_1.jpg'\n\n\nimg = Image.open(img_path)\nplt.imshow(img)\nplt.axis('off')  # Turn off axis labels\nplt.show()","metadata":{"_uuid":"016ba401-02b8-4799-97a6-6bf097fe10e4","_cell_guid":"10e1c05f-9545-4a4f-b87d-2b4c78d07724","collapsed":false,"id":"oGBNzpomhO-A","outputId":"18367c93-bf93-45df-f7a2-f02be9976b3b","jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from paddleocr import PaddleOCR, draw_ocr\nimport cv2\nfrom PIL import Image\nfrom PIL import ImageFont\nimport paddle\n# Initialize the PaddleOCR model with the DBNet detector\n# paddle.device.set_device('gpu')\nocr = PaddleOCR(use_angle_cls=True, lang=\"en\")\n\n# Perform OCR on an image\nimg_path = '/content/drive/MyDrive/amazon/test_1.jpg'\nresult = ocr.ocr(img_path, cls=True)\n\n# print the results\nfor idx in range(len(result)):\n    res = result[idx]\n    for line in res:\n        print(line[1][0])\n        print(\"\")","metadata":{"_uuid":"4dd91948-86a6-43c8-a901-19d2bc547ff3","_cell_guid":"fecddf52-26d4-4ecd-af89-9283655d6c9c","collapsed":false,"id":"uK4TjyzrFrbd","outputId":"6706d0ff-4f4c-4c02-c657-acc209144804","jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Ocr result df processing","metadata":{"_uuid":"e0413b2d-0bf1-4c0c-8475-0489e18d8983","_cell_guid":"fa1f6ad4-7fae-4ac1-8230-720b6b1ab53b","id":"b0EmeuAmnf0k","trusted":true}},{"cell_type":"code","source":"df = pd.read_csv('/content/drive/MyDrive/amazon/ocr_result.csv')","metadata":{"_uuid":"e56b19fd-00fd-4ffb-9409-3fd5bfd5471b","_cell_guid":"b1498a39-789d-4c28-9de2-faed1a5efae0","collapsed":false,"id":"OQeWJerreblp","jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df","metadata":{"_uuid":"eb937e83-861c-47fa-ab2f-8ffacceb2ee3","_cell_guid":"db7946c6-8439-4d54-836c-6ee69fbd3df4","collapsed":false,"id":"VeodlTkzC1DR","outputId":"7ee272ca-3df0-4dee-bd89-72b7edc0a0c4","jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Regex for pattern matching and extracting dimension value with measuremnt units","metadata":{"_uuid":"4b248943-287c-4210-a154-b81023862b0d","_cell_guid":"a4fa1231-b3fc-484b-a2fa-7df34e890fd3","id":"Le8Mh7EJFtZy","trusted":true}},{"cell_type":"code","source":"import re\n\ndef extract_data(text,key):\n    def generate_regex_pattern(key):\n        unit_values = {\n        \"item_weight\": \"mg, milligram, milligrams, g, gm, gms, gram, grams, kg, kgs, kilogram, kilograms, lb, lbs, pound, pounds, oz, ounce, ug, microgram, micrograms, ton, tons\",\n        \"height\": \"m, meter, meters, cm, centimeter, centimeters, ft, foot, feet, in, inch, inches, cms, mm, millimeter, millimeters, yd, yard, yards\",\n        \"depth\": \"m, meter, meters, cm, centimeter, centimeters, ft, foot, feet, in, inch, inches, cms, mm, millimeter, millimeters, yd, yard, yards, cubic foot, microlitre, cup, fluid ounce, centilitre, imperial gallon, pint, decilitre, litre, millilitre, quart, cubic inch, gallon\",\n        \"item_volume\": \" l, liter, litres, ml, milliliter, milliliters, gal, gallon, gallons, fl oz, floz\",\n        \"maximum_weight_recommendation\": \"mg, milligram, milligrams, g, gm, gms, gram, grams, kg, kgs, kilogram, kilograms, lb, lbs, pound, pounds, oz, ounce, ug, microgram, micrograms, ton, tons\",\n        \"width\": \"m, meter, meters, cm, centimeter, centimeters, ft, foot, feet, in, inch, inches, cms, mm, millimeter, millimeters, yd, yard, yards\",\n        \"voltage\": \"v, volt, volts, kv, kilovolt, kilovolts, mv, millivolt, millivolts\",\n        \"wattage\": \"w, watt, watts, kw, kilowatts, killowatt\"\n        }\n        \"\"\"Generates a regex pattern for the given key from unit_values.\"\"\"\n\n        if key not in unit_values:\n            raise ValueError(f\"Invalid key: {key}. Available keys are: {list(unit_values.keys())}\")\n\n        units = unit_values[key].split(',')\n        units_pattern = '|'.join([rf\"{unit.strip()}\" for unit in units])\n        return rf\".+?(\\d+(\\.\\d+)?|\\d+,\\d+)\\s*({units_pattern})\"\n\n\n    single_number_unit_pattern = generate_regex_pattern(key)\n    cleaned_data = []\n    matches = re.findall(single_number_unit_pattern, text)\n    return matches","metadata":{"_uuid":"5dff6f92-9a4e-4d70-8294-dc62d8181685","_cell_guid":"f45fe60f-663b-4833-ac19-57b710be915b","collapsed":false,"id":"fgHxeHIEbHkX","jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\n\n# Define your function\ndef combine_characters_to_sentence(char_list):\n    return ''.join(char_list)\n\n# Apply the function to each row of the 'answers' column\ndf['combined_sentence'] = df['answers'].apply(combine_characters_to_sentence)","metadata":{"_uuid":"c69824e2-a70c-4631-baf4-e05e039cddfe","_cell_guid":"a8453a24-7e9f-435a-bebf-22d179f42805","collapsed":false,"id":"UEJYTuf-BbrX","jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df","metadata":{"_uuid":"efb37c66-17c6-43fa-a997-69e7ed156082","_cell_guid":"7c705c89-e061-4399-9eea-c4edf262dc07","collapsed":false,"outputId":"ac706dc5-84c5-47ce-9cb7-dc41ab8b1cd0","id":"Fzcq6SckkehQ","jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def apply_function_to_rows_with_entity_name(df, function, sentence_column, entity_name_column, result_column_name, error_value=None):\n  def apply_with_error_handling(row):\n    try:\n      sentence = row[sentence_column]\n      entity_name = row[entity_name_column]\n      return function(sentence.lower(), entity_name)\n    except Exception as e:\n      print(f\"Error processing row: {e}\")\n      return error_value\n\n  df[result_column_name] = df.apply(apply_with_error_handling, axis=1)\n  return df\n\n\ndf['combined_sentence'] = df['combined_sentence'].str.lower()\nresult_df = apply_function_to_rows_with_entity_name(df, extract_data, 'combined_sentence', 'entity_name', 'extracted_data_1')","metadata":{"_uuid":"a941b73e-627f-4d4f-af60-02b9fae54864","_cell_guid":"fdfe3ef8-9735-445a-8444-d17290269b36","collapsed":false,"id":"4Gk2eDjbBwDw","jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def process_extracted_data(data):\n  if isinstance(data, list):\n    result_string = \",\".join(\",\".join(tup) for tup in data)\n    return result_string\n  else:\n    return \"\"\n\nresult_df['processed_extracted_data'] = result_df['extracted_data_1'].apply(process_extracted_data)","metadata":{"_uuid":"adfdabb2-c47f-4408-afd0-c3b712646ff8","_cell_guid":"1ede5bd5-576e-4ac6-9184-02dfbe18e3a6","collapsed":false,"id":"Tz1vgemqGD7A","jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Extracting highest value that is followed by measurement units","metadata":{"_uuid":"6d5bfb55-41e8-4633-b042-f056a9e54411","_cell_guid":"bd01dc63-6136-4d0f-ac8f-bae242d57185","id":"gB7z6EZvnm1h","trusted":true}},{"cell_type":"code","source":"def extract_highest_value_and_first_unit(text):\n    \"\"\"\n    Extracts the highest numerical value and the first unit that appears after it in the text.\n\n    Args:\n        text: A string containing comma-separated values and units.\n\n    Returns:\n        A tuple containing the highest numerical value and the first unit found after it,\n        or (None, None) if no valid values or units are found.\n    \"\"\"\n    highest_value = None\n    first_unit = None\n    # Split the text into individual values\n    text = re.sub(r'(\\d+),(\\d+)', r'\\1\\2', text)\n    values = text.split(',')\n\n    # Initialize variables to store the highest value and its unit\n\n\n    # Iterate through the values\n    for i in range(0, len(values)):\n        try:\n            # Check if the current value is numeric\n            current_value = float(values[i])\n\n            # Update the highest value if necessary\n            if highest_value is None or current_value > highest_value:\n                highest_value = current_value\n\n                # Look for the first unit after the highest value\n                for j in range(i + 1, len(values)):\n                    if values[j] in [\"mg\", \"milligram\", \"milligrams\", \"g\", \"gm\", \"gms\", \"gram\", \"grams\", \"kg\", \"kgs\", \"kilogram\", \"kilograms\", \"lb\", \"lbs\", \"pound\", \"pounds\", \"oz\", \"ounce\", \"ug\", \"microgram\", \"micrograms\", \"ton\", \"tons\", \"m\", \"meter\", \"meters\", \"cm\", \"centimeter\", \"centimeters\", \"ft\", \"foot\", \"feet\", \"in\", \"inch\", \"inches\", \"cms\", \"mm\", \"millimeter\", \"millimeters\", \"yd\", \"yard\", \"yards\", \"cubic foot\", \"microlitre\", \"cup\", \"fluid ounce\", \"centilitre\", \"imperial gallon\", \"pint\", \"decilitre\", \"litre\", \"millilitre\", \"quart\", \"cubic inch\", \"gallon\", \"l\", \"liter\", \"litres\", \"ml\", \"milliliter\", \"milliliters\", \"gal\", \"gallon\", \"gallons\", \"fl oz\", \"floz\", \"v\", \"volt\", \"volts\", \"kv\", \"kilovolt\", \"kilovolts\", \"mv\", \"millivolt\", \"millivolts\", \"w\", \"watt\", \"watts\", \"kw\", \"kilowatts\", \"killowatt\"]:  # Add more units if needed\n                        first_unit = values[j]\n                        break  # Stop searching once a unit is found\n\n        except ValueError:\n            # Ignore values that cannot be converted to numbers\n            pass\n\n    return highest_value, first_unit\n\n# Example usage\ntext = \"91.44,.44,cm,199.39,.39,cm,36,,in,78,,in,2.63,.63,in\"\nhighest_value, first_unit = extract_highest_value_and_first_unit(text)\nprint(f\"Highest value: {highest_value}, First unit: {first_unit}\")","metadata":{"_uuid":"6fe47067-db29-4549-a487-199600c6ce3e","_cell_guid":"35029447-b706-4788-b265-844ad5ad4801","collapsed":false,"id":"i6IN-ucKQXuZ","outputId":"95a22109-6dc8-4ec2-ac1e-5ca35ce7fd7c","jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"result_df[\"text\"] = result_df['processed_extracted_data'].apply(extract_highest_value_and_first_unit)","metadata":{"_uuid":"7b5b2156-effc-46c3-a712-b9375f3060d4","_cell_guid":"909e60b5-df57-4746-859c-37650c0d6b0b","collapsed":false,"id":"zaNIZKCJQlM6","jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Formatting measurement as per submission requirement","metadata":{"_uuid":"1340399c-1a43-45b7-a186-b29c2a2c666b","_cell_guid":"38101885-81bb-431a-8720-a44d1800af61","id":"J9QF_d6An0SW","trusted":true}},{"cell_type":"code","source":"def format_measurement(value, unit, unit_conversion_map):\n  \"\"\"\n  Formats a measurement with a given value and unit, using a unit conversion map.\n\n  Args:\n      value: A float representing the measurement value.\n      unit: A string representing the measurement unit.\n      unit_conversion_map: A dictionary mapping short unit names to their full names.\n\n  Returns:\n      A string representing the formatted measurement, or None if the unit is invalid.\n  \"\"\"\n\n  # Check if the unit is valid\n  if unit not in unit_conversion_map:\n      return None\n\n  # Convert the unit to its full name\n  full_unit = unit_conversion_map[unit]\n\n  # Format the measurement\n  formatted_measurement = f\"{value} {full_unit}\"\n\n  return formatted_measurement\nresult_df['text']\n# Example usage\nvalue = result_df['text'][0][0]\nunit = result_df['text'][0][1]\nunit_conversion_map = {\n    'cm': 'centimetre',\n    'cms': 'centimetre', # Added\n    'ft': 'foot',\n    'in': 'inch',\n    'm': 'metre',\n    'mm': 'millimetre',\n    'yd': 'yard',\n    'g': 'gram',\n    'gm': 'gram', # Added\n    'gms': 'gram', # Added\n    'kg': 'kilogram',\n    'kgs': 'kilogram', # Added\n    'ug': 'microgram',\n    'mg': 'milligram',\n    'oz': 'ounce',\n    'lb': 'pound',\n    'lbs': 'pound', # Added\n    'ton': 'ton',\n    'tons': 'ton', # Added\n    'kv': 'kilovolt',\n    'mv': 'millivolt',\n    'v': 'volt',\n    'volts': 'volt', # Added\n    'w': 'watt',\n    'watts': 'watt', # Added\n    'kw': 'kilowatt',\n    'kilowatts': 'kilowatt', # Added\n    'killowatt': 'kilowatt', # Added\n    'cl': 'centilitre',\n    'cu_ft': 'cubic foot',\n    'cu_in': 'cubic inch',\n    'cup': 'cup',\n    'dl': 'decilitre',\n    'fl_oz': 'fluid ounce',\n    'floz': 'fluid ounce', # Added\n    'gal': 'gallon',\n    'imp_gal': 'imperial gallon',\n    'l': 'litre',\n    'litres': 'litre', # Added\n    'liter': 'litre', # Added\n    'ul': 'microlitre',\n    'ml': 'millilitre',\n    'milliliters': 'millilitre', # Added\n    'milliliter': 'millilitre', # Added,\n    'centimeters': 'centimetre',\n    'feet': 'foot',\n    'inches': 'inch',\n    'meters': 'metre',\n    'millimeters': 'millimetre',\n    'yards': 'yard',\n    'grams': 'gram',\n    'kilograms': 'kilogram',\n    'micrograms': 'microgram',\n    'milligrams': 'milligram',\n    'pounds': 'pound',\n    'tons': 'ton',\n    'kilovolts': 'kilovolt',\n    'millivolts': 'millivolt',\n    'gallon': 'gallon',\n    'gallons': 'gallon'}\n\nformatted_measurement = format_measurement(value, unit, unit_conversion_map)\nprint(formatted_measurement)  # Output: 199.39 centimetre","metadata":{"_uuid":"13f4b463-ebff-4807-823e-b4e034df7339","_cell_guid":"1f92a4f1-d036-4131-8dd2-33931c200861","collapsed":false,"id":"zyslWI75YeR5","outputId":"d469d71e-34df-4f49-9465-6f8a604a427d","jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def apply_format_measurement(row):\n  \"\"\"Applies the format_measurement function to a row of the DataFrame.\"\"\"\n  value = row['text'][0]\n  unit = row['text'][1]\n  if value is not None and unit is not None:\n    return format_measurement(value, unit, unit_conversion_map)\n  else:\n    return None\n\n# Apply the function to the 'text' column\nresult_df['formatted_measurement_1'] = result_df.apply(apply_format_measurement, axis=1).fillna('')","metadata":{"_uuid":"7e29dbb3-558f-4a25-b208-7db7a333cc42","_cell_guid":"8b9a212e-e87c-4387-96fb-bbfbc6ff95e4","collapsed":false,"id":"aYO3PqrgZCs4","jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"result_df","metadata":{"_uuid":"7f3c2c55-0fdc-45fe-9ad4-211aebce24b5","_cell_guid":"8583102e-7933-4f38-9e29-8d7085cb36d3","collapsed":false,"outputId":"c2216d7e-a199-41b3-e112-acdb3a1c6f47","id":"BQlWAqDLmOhg","jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Predictions","metadata":{"_uuid":"7d803d6e-1754-4c6c-a8ff-6ea38c9f46d0","_cell_guid":"6285fa60-fd17-42eb-9b59-2fe2e7eb08dd","id":"49vGLbWDn9jV","trusted":true}},{"cell_type":"code","source":"new_df = pd.DataFrame()\nnew_df['index'] = result_df['index']\nnew_df['prediction'] = result_df['formatted_measurement_1']\nnew_df.to_csv('output.csv', index=False)","metadata":{"_uuid":"a1542d1e-5b1b-4e5f-a9ab-06869c912f89","_cell_guid":"71a66bdc-d04d-4733-863a-7b66cc4ffb5c","collapsed":false,"id":"jmeX1dVOcOJk","jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"new_df","metadata":{"_uuid":"1a98ef11-3671-46f5-ac94-b9231cbd8612","_cell_guid":"beabbc8c-b7e0-44ff-9988-5a1d9eb3d48d","collapsed":false,"id":"GK7pFTMtjX0O","outputId":"0874e89b-1b02-4678-c964-21272c63fc9d","jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"non_nan_counts = new_df.notna().sum()\nprint(non_nan_counts)","metadata":{"_uuid":"8a870849-b200-4d82-b677-30e8d245f434","_cell_guid":"76e95d73-4b21-42cc-a7c9-de7656049930","collapsed":false,"id":"lmUJ-uDgkTC8","outputId":"ed1b6e89-627e-42f8-aae0-bd29245ea37a","jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}